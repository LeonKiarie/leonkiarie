import csv
import random
import math
import operator

with open('gender.csv') as csvfile:
    readCSV = csv.reader(csvfile, delimiter=',')
    for row in readCSV:
        print(', '.join(row))


def loadFile(filename, split_ratio, trainingData=[], testData=[]):
    with open(filename) as csvfile:
        rows = csv.reader(csvfile, delimiter=',')
        data = list(rows)
        for x in range(len(data)):
            for y in range(3):
                data[x][y] = int(data[x][y])
            if random.random() < split_ratio:
                trainingData.append(data[x])
            else:
                testData.append(data[x])


# Cartesian distance calculator function for KNN algorithm
def euclideanDistance(item1, item2, length):
    cal_dist = 0
    for x in range(length):
        cal_dist += pow((item1[x] - item2[x]), 2)
    return math.sqrt(cal_dist)


# Function to check the nearest points from each test data to predict the class
def checkNeighbors(trainingData, test, k):
    distance_measure = []
    length = len(test) - 1
    for x in range(len(trainingData)):
        dist = euclideanDistance(test, trainingData[x], length)
        distance_measure.append((dist, trainingData[x]))
    distance_measure.sort(key=operator.itemgetter(0))
    # print(distance_measure)
    neighbors = []
    for x in range(k):
        neighbors.append(distance_measure[x][1])
    return neighbors


# Function to see the majority class near the point and predict the class
def determineClass(neighbors):
    classMajority = {}
    for x in range(len(neighbors)):
        classification = neighbors[x][-1]
        if classification in classMajority:
            classMajority[classification] += 1
        else:
            classMajority[classification] = 1
    sortedMajority = max(classMajority.items(), key=operator.itemgetter(1))[0]
    return sortedMajority[0][0]


# Function to calculate the accuracy of prediction
def accuracy(test, prediction):
    identified = 0
    for x in range(len(test)):
        if test[x][-1] is prediction[x]:
            identified += 1
    return (identified / float(len(test))) * 100.0


def main():
    # Data from file
    trainingData = []
    testData = []
    # Splitting the datta 67/33 which is an universal value to check accuracy
    split = 0.67
    loadFile('gender.csv', split, trainingData, testData)
    print('Training Data: ' + repr(len(trainingData)))
    print('Test Data: ' + repr(len(testData)))
    # Predicting the class
    predictions = []
    k = input('Enter value for k: ')
    k = int(k)
    for x in range(len(testData)):
        neighbors = checkNeighbors(trainingData, testData[x], k)
        result = determineClass(neighbors)
        predictions.append(result)
        print('--> predicted=' + repr(result) + '-->actual=' + repr(testData[x][-1]))
    accuracy_1 = accuracy(testData, predictions)
    print('Accuracy:' + repr(accuracy_1) + '%')


main()
 13  
Group_Assignment_2/Fuel-Efficiency.csv
@@ -0,0 +1,13 @@
Gas,Miles
37.05,403
34.71,396.5
32.5,383.5
32.63,321.3
34.45,391.3
36.79,386.1
37.44,371.8
38.09,404.3
38.09,392.6
38.74,386.49
39,395.2
40,385.5
 87  
Group_Assignment_2/Regression_Problem.py
@@ -0,0 +1,87 @@
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.linear_model import LinearRegression


#Specifying size of the figure.
plt.rcParams['figure.figsize'] = (20.0,10.0)


#Reading data from a csv file using Pandas module.
data = pd.read_csv("Fuel-Efficiency.csv")


#Fetching the values from the csv file to create an object of Independent and Dependent variable.
X = data['Miles'].values
Y = data['Gas'].values


#Finding the mean of both the variables.
mean_x = np.mean(X)
mean_y = np.mean(Y)

#Calculating the no. of elements present.
n = len(X)


#Process to find the slope of the regression line using the formula M = Sum of ((X - Xmean)*(Y - Ymean)) / Sum of (X - Xmean)^2
numerator = 0
denominator = 0

for i in range(n):
    numerator = numerator + (X[i]-mean_x)*(Y[i]-mean_y)
    denominator = denominator + (X[i] - mean_x) ** 2

m = numerator/denominator

#Calculating Y Intercept of the line using formula c = Y - mX
c = mean_y - (m * mean_x)

Rnum = 0
Rden = 0
yp = []


#Calculating the R-Squared value or the Coefficient of Determination that shows the goodness of the fit of the regression line.
for i in range(len(X)):
    yp.append(m*X[i]+c)
    Rnum += (yp[i] - mean_y) ** 2
    Rden += (Y[i] - mean_y) ** 2

Rsquare = Rnum/Rden


#Predicting the gallons for the 1200 miles of travel.
DepPrediction = m*1200 + c
print("Value of Co-efficient of determination is:",Rsquare)
print("Value predicted through the model for 1200 miles is: %d Gallons (Approximately)" % int(DepPrediction))

#Plotting the values on a graph

min_x = np.min(X)
max_x = np.max(X)

x = np.linspace(min_x,max_x,1000)
y = m*x + c


plt.plot(x,y,label="Regression Line")
plt.scatter(X,Y,label="Scatter Plot of Variables")


plt.xlabel("Miles Travelled")
plt.ylabel("Gas Required")

plt.legend()
plt.show()

#Using the Sklearn module to make prediction
X = X.reshape(-1,1)
Xnew = [[1200]]

reg = LinearRegression()
reg.fit(X,Y)
Ypredicted = reg.predict(Xnew)

print("Value predicted through the Sklearn module for 1200 miles is: %d Gallons (Approximately)" % int(Ypredicted))
 13  
Group_Assignment_2/gender.csv
@@ -0,0 +1,13 @@
170,57,32,W
192,95,28,M
150,45,30,W
170,65,29,M
175,78,35,M
185,90,32,M
170,65,28,W
155,48,31,W
160,55,30,W
182,80,30,M
180,80,27,M
160,50,31,W
175,72,30,M
